// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: permission.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionClient is the client API for Permission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionClient interface {
	// Permissions
	CreatePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*PermissionView, error)
	CreatePermissionWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*PermissionView, error)
	DeletePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*PermissionView, error)
	DeletePermissionWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*PermissionView, error)
	CheckPermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*IsAllowed, error)
	ListObjectRelations(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*Relations, error)
	ListSubjectRelations(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*Relations, error)
	ExpandRelation(ctx context.Context, in *SubjectSet, opts ...grpc.CallOption) (*SubjectSetList, error)
	ListObjectRelationsWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*Relations, error)
	// Scopes
	CreateScope(ctx context.Context, in *CreateScopeParams, opts ...grpc.CallOption) (*Scope, error)
	GetScope(ctx context.Context, in *GetScopeParams, opts ...grpc.CallOption) (*Scope, error)
	GetScopes(ctx context.Context, in *GetScopesParams, opts ...grpc.CallOption) (*Scopes, error)
	DeleteScope(ctx context.Context, in *GetScopeParams, opts ...grpc.CallOption) (*EmptyScope, error)
	// Roles
	CreateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*Role, error)
	GetRole(ctx context.Context, in *GetRoleParams, opts ...grpc.CallOption) (*Role, error)
	GetRoles(ctx context.Context, in *GetRolesParams, opts ...grpc.CallOption) (*Roles, error)
	UpdateRole(ctx context.Context, in *UpdateRoleParams, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *GetRoleParams, opts ...grpc.CallOption) (*EmptyScope, error)
}

type permissionClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionClient(cc grpc.ClientConnInterface) PermissionClient {
	return &permissionClient{cc}
}

func (c *permissionClient) CreatePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*PermissionView, error) {
	out := new(PermissionView)
	err := c.cc.Invoke(ctx, "/Permission/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CreatePermissionWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*PermissionView, error) {
	out := new(PermissionView)
	err := c.cc.Invoke(ctx, "/Permission/CreatePermissionWithSubjectSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) DeletePermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*PermissionView, error) {
	out := new(PermissionView)
	err := c.cc.Invoke(ctx, "/Permission/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) DeletePermissionWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*PermissionView, error) {
	out := new(PermissionView)
	err := c.cc.Invoke(ctx, "/Permission/DeletePermissionWithSubjectSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CheckPermission(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*IsAllowed, error) {
	out := new(IsAllowed)
	err := c.cc.Invoke(ctx, "/Permission/CheckPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ListObjectRelations(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*Relations, error) {
	out := new(Relations)
	err := c.cc.Invoke(ctx, "/Permission/ListObjectRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ListSubjectRelations(ctx context.Context, in *CreatePermissionParams, opts ...grpc.CallOption) (*Relations, error) {
	out := new(Relations)
	err := c.cc.Invoke(ctx, "/Permission/ListSubjectRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ExpandRelation(ctx context.Context, in *SubjectSet, opts ...grpc.CallOption) (*SubjectSetList, error) {
	out := new(SubjectSetList)
	err := c.cc.Invoke(ctx, "/Permission/ExpandRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) ListObjectRelationsWithSubjectSet(ctx context.Context, in *CreatePermissionWithSubjectSetParams, opts ...grpc.CallOption) (*Relations, error) {
	out := new(Relations)
	err := c.cc.Invoke(ctx, "/Permission/ListObjectRelationsWithSubjectSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CreateScope(ctx context.Context, in *CreateScopeParams, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, "/Permission/CreateScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetScope(ctx context.Context, in *GetScopeParams, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, "/Permission/GetScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetScopes(ctx context.Context, in *GetScopesParams, opts ...grpc.CallOption) (*Scopes, error) {
	out := new(Scopes)
	err := c.cc.Invoke(ctx, "/Permission/GetScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) DeleteScope(ctx context.Context, in *GetScopeParams, opts ...grpc.CallOption) (*EmptyScope, error) {
	out := new(EmptyScope)
	err := c.cc.Invoke(ctx, "/Permission/DeleteScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) CreateRole(ctx context.Context, in *CreateRoleParams, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/Permission/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetRole(ctx context.Context, in *GetRoleParams, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/Permission/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) GetRoles(ctx context.Context, in *GetRolesParams, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/Permission/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) UpdateRole(ctx context.Context, in *UpdateRoleParams, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/Permission/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionClient) DeleteRole(ctx context.Context, in *GetRoleParams, opts ...grpc.CallOption) (*EmptyScope, error) {
	out := new(EmptyScope)
	err := c.cc.Invoke(ctx, "/Permission/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServer is the server API for Permission service.
// All implementations must embed UnimplementedPermissionServer
// for forward compatibility
type PermissionServer interface {
	// Permissions
	CreatePermission(context.Context, *CreatePermissionParams) (*PermissionView, error)
	CreatePermissionWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*PermissionView, error)
	DeletePermission(context.Context, *CreatePermissionParams) (*PermissionView, error)
	DeletePermissionWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*PermissionView, error)
	CheckPermission(context.Context, *CreatePermissionParams) (*IsAllowed, error)
	ListObjectRelations(context.Context, *CreatePermissionParams) (*Relations, error)
	ListSubjectRelations(context.Context, *CreatePermissionParams) (*Relations, error)
	ExpandRelation(context.Context, *SubjectSet) (*SubjectSetList, error)
	ListObjectRelationsWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*Relations, error)
	// Scopes
	CreateScope(context.Context, *CreateScopeParams) (*Scope, error)
	GetScope(context.Context, *GetScopeParams) (*Scope, error)
	GetScopes(context.Context, *GetScopesParams) (*Scopes, error)
	DeleteScope(context.Context, *GetScopeParams) (*EmptyScope, error)
	// Roles
	CreateRole(context.Context, *CreateRoleParams) (*Role, error)
	GetRole(context.Context, *GetRoleParams) (*Role, error)
	GetRoles(context.Context, *GetRolesParams) (*Roles, error)
	UpdateRole(context.Context, *UpdateRoleParams) (*Role, error)
	DeleteRole(context.Context, *GetRoleParams) (*EmptyScope, error)
	mustEmbedUnimplementedPermissionServer()
}

// UnimplementedPermissionServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServer struct {
}

func (UnimplementedPermissionServer) CreatePermission(context.Context, *CreatePermissionParams) (*PermissionView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionServer) CreatePermissionWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*PermissionView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionWithSubjectSet not implemented")
}
func (UnimplementedPermissionServer) DeletePermission(context.Context, *CreatePermissionParams) (*PermissionView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionServer) DeletePermissionWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*PermissionView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionWithSubjectSet not implemented")
}
func (UnimplementedPermissionServer) CheckPermission(context.Context, *CreatePermissionParams) (*IsAllowed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedPermissionServer) ListObjectRelations(context.Context, *CreatePermissionParams) (*Relations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectRelations not implemented")
}
func (UnimplementedPermissionServer) ListSubjectRelations(context.Context, *CreatePermissionParams) (*Relations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjectRelations not implemented")
}
func (UnimplementedPermissionServer) ExpandRelation(context.Context, *SubjectSet) (*SubjectSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandRelation not implemented")
}
func (UnimplementedPermissionServer) ListObjectRelationsWithSubjectSet(context.Context, *CreatePermissionWithSubjectSetParams) (*Relations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectRelationsWithSubjectSet not implemented")
}
func (UnimplementedPermissionServer) CreateScope(context.Context, *CreateScopeParams) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedPermissionServer) GetScope(context.Context, *GetScopeParams) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScope not implemented")
}
func (UnimplementedPermissionServer) GetScopes(context.Context, *GetScopesParams) (*Scopes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopes not implemented")
}
func (UnimplementedPermissionServer) DeleteScope(context.Context, *GetScopeParams) (*EmptyScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScope not implemented")
}
func (UnimplementedPermissionServer) CreateRole(context.Context, *CreateRoleParams) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedPermissionServer) GetRole(context.Context, *GetRoleParams) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedPermissionServer) GetRoles(context.Context, *GetRolesParams) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedPermissionServer) UpdateRole(context.Context, *UpdateRoleParams) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedPermissionServer) DeleteRole(context.Context, *GetRoleParams) (*EmptyScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedPermissionServer) mustEmbedUnimplementedPermissionServer() {}

// UnsafePermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServer will
// result in compilation errors.
type UnsafePermissionServer interface {
	mustEmbedUnimplementedPermissionServer()
}

func RegisterPermissionServer(s grpc.ServiceRegistrar, srv PermissionServer) {
	s.RegisterService(&Permission_ServiceDesc, srv)
}

func _Permission_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreatePermission(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CreatePermissionWithSubjectSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionWithSubjectSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreatePermissionWithSubjectSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/CreatePermissionWithSubjectSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreatePermissionWithSubjectSet(ctx, req.(*CreatePermissionWithSubjectSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).DeletePermission(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_DeletePermissionWithSubjectSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionWithSubjectSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).DeletePermissionWithSubjectSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/DeletePermissionWithSubjectSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).DeletePermissionWithSubjectSet(ctx, req.(*CreatePermissionWithSubjectSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/CheckPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CheckPermission(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ListObjectRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ListObjectRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/ListObjectRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ListObjectRelations(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ListSubjectRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ListSubjectRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/ListSubjectRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ListSubjectRelations(ctx, req.(*CreatePermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ExpandRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ExpandRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/ExpandRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ExpandRelation(ctx, req.(*SubjectSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_ListObjectRelationsWithSubjectSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionWithSubjectSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).ListObjectRelationsWithSubjectSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/ListObjectRelationsWithSubjectSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).ListObjectRelationsWithSubjectSet(ctx, req.(*CreatePermissionWithSubjectSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/CreateScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreateScope(ctx, req.(*CreateScopeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/GetScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetScope(ctx, req.(*GetScopeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/GetScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetScopes(ctx, req.(*GetScopesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_DeleteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).DeleteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/DeleteScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).DeleteScope(ctx, req.(*GetScopeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).CreateRole(ctx, req.(*CreateRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetRole(ctx, req.(*GetRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).GetRoles(ctx, req.(*GetRolesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).UpdateRole(ctx, req.(*UpdateRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permission_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Permission/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServer).DeleteRole(ctx, req.(*GetRoleParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Permission_ServiceDesc is the grpc.ServiceDesc for Permission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Permission",
	HandlerType: (*PermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermission",
			Handler:    _Permission_CreatePermission_Handler,
		},
		{
			MethodName: "CreatePermissionWithSubjectSet",
			Handler:    _Permission_CreatePermissionWithSubjectSet_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Permission_DeletePermission_Handler,
		},
		{
			MethodName: "DeletePermissionWithSubjectSet",
			Handler:    _Permission_DeletePermissionWithSubjectSet_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _Permission_CheckPermission_Handler,
		},
		{
			MethodName: "ListObjectRelations",
			Handler:    _Permission_ListObjectRelations_Handler,
		},
		{
			MethodName: "ListSubjectRelations",
			Handler:    _Permission_ListSubjectRelations_Handler,
		},
		{
			MethodName: "ExpandRelation",
			Handler:    _Permission_ExpandRelation_Handler,
		},
		{
			MethodName: "ListObjectRelationsWithSubjectSet",
			Handler:    _Permission_ListObjectRelationsWithSubjectSet_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _Permission_CreateScope_Handler,
		},
		{
			MethodName: "GetScope",
			Handler:    _Permission_GetScope_Handler,
		},
		{
			MethodName: "GetScopes",
			Handler:    _Permission_GetScopes_Handler,
		},
		{
			MethodName: "DeleteScope",
			Handler:    _Permission_DeleteScope_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Permission_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Permission_GetRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Permission_GetRoles_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Permission_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Permission_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission.proto",
}
